from src.db.api.get_work import get_work_time
from src.db.api.utils import get_unfilled
from src.middlewares.is_register import IsRegister
from src.states import CustomStates
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram3b8_calendar import SimpleCalCallback, SimpleCalendar

from src.utils.get_work_keyboard import get_keyboard
from src.utils.utils import calculate_total, get_week_dates, get_month_dates

get_work_router = Router()
get_work_router.message.middleware(IsRegister())


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞ –≤—ã–≥—Ä—É–∑–∫–∏
@get_work_router.message(Command('getwork'))
@get_work_router.message(Text('üìÑ –ú–æ–∏ —Å–º–µ–Ω—ã'))
async def get_data_handler(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        types.InlineKeyboardButton(text="–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data="month"),
        types.InlineKeyboardButton(text="–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="week"),
        types.InlineKeyboardButton(text="–°–≤–æ–±–æ–¥–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="custom")
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard.as_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@get_work_router.callback_query(lambda query: query.data in ["month", "week", "custom"])
async def process_time_period(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()

    if callback_query.data == "month":
        start_date, end_date = await get_month_dates()
    elif callback_query.data == "week":
        start_date, end_date = await get_week_dates()
    else:
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞: ",
                                            reply_markup=SimpleCalendar().start_calendar())
        await state.set_state(CustomStates.CUSTOM_START_DATE)
        return

    rows = await get_work_time(callback_query.from_user.id, start_date, end_date)
    unfilled = await get_unfilled(callback_query.from_user.id, start_date, end_date)
    await callback_query.message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —Å–º–µ–Ω—ã:")
    total_minutes = 0
    for row in rows:
        date = row[0]
        start_time = row[1]
        end_time = row[2]
        hours = row[3]
        minutes = calculate_total(hours)
        total_minutes += minutes
        await callback_query.message.answer(f"–î–∞—Ç–∞: {date}, –ù–∞—á–∞–ª–æ: {start_time}, –ö–æ–Ω–µ—Ü: {end_time}, –ß–∞—Å–æ–≤: {hours}\n")
    await callback_query.message.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: {total_minutes // 60}:{total_minutes % 60}\n")
    if unfilled:
        await callback_query.message.answer("–ò–º–µ—é—Ç—Å—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–º–µ–Ω—ã!\n"
                                            "–¢—ã –º–æ–∂–µ—à—å –∏—Ö –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥—è –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã.", reply_markup=get_keyboard(unfilled))
    else:
        await callback_query.message.answer("–í—Å–µ —Å–º–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—Ä—ã—Ç—ã")

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@get_work_router.callback_query(SimpleCalCallback.filter(), CustomStates.CUSTOM_START_DATE)
async def set_custom_start_date(callback_query: types.CallbackQuery, callback_data: SimpleCalCallback,
                                state: FSMContext):
    start_date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if start_date:
        await callback_query.message.answer(start_date.strftime('%Y-%m-%d'))
    await state.update_data(start_date=start_date.strftime('%Y-%m-%d'))
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞: ", reply_markup=SimpleCalendar().start_calendar())
    await state.set_state(CustomStates.CUSTOM_END_DATE)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
@get_work_router.callback_query(SimpleCalCallback.filter(), CustomStates.CUSTOM_END_DATE)
async def set_custom_end_date(callback_query: types.CallbackQuery, callback_data: SimpleCalCallback, state: FSMContext):
    end_date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if end_date:
        await callback_query.message.answer(end_date.strftime('%Y-%m-%d'))
    await state.update_data(end_date=end_date.strftime('%Y-%m-%d'))
    data = await state.get_data()
    start_date = data.get("start_date")
    end_date = data.get("end_date")
    rows = await get_work_time(callback_query.from_user.id, start_date, end_date)
    unfilled = await get_unfilled(callback_query.from_user.id, start_date, end_date)
    await callback_query.message.answer("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —Å–º–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏:")

    total_minutes = 0
    for row in rows:
        date = row[0]
        start_time = row[1]
        end_time = row[2]
        hours = row[3]
        minutes = calculate_total(hours)
        total_minutes += minutes
        await callback_query.message.answer(
            f"–î–∞—Ç–∞: {date}, –ù–∞—á–∞–ª–æ: {start_time}, –ö–æ–Ω–µ—Ü: {end_time}, –ß–∞—Å–æ–≤: {hours}\n")
    await callback_query.message.answer(f"–û–±—â–µ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {total_minutes // 60}:{total_minutes % 60}\n")
    if unfilled:
        await callback_query.message.answer("–ò–º–µ—é—Ç—Å—è –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–º–µ–Ω—ã!\n"
                                            "–¢—ã –º–æ–∂–µ—à—å –∏—Ö –∑–∞–∫—Ä—ã—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥—è –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã.",
                                            reply_markup=get_keyboard(unfilled))
    else:
        await callback_query.message.answer("–í—Å–µ —Å–º–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—Ä—ã—Ç—ã")
    await state.clear()
